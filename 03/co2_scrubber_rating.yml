---
- name: CO2 scrubber rating .. check if rating list only has one element
  set_fact:
    needs_rating: '{{ rating_list | length > 1 }}'

- block:
  - name: CO2 scrubber rating .. Create hash for each bit position
    set_fact:
      bits_lines: '{{ bits_lines | default({}) | combine({j: []}) }}'
    loop: '{{ rating_list[0] }}'
    loop_control:
      index_var: j
      loop_var: _unused
  
  - name: CO2 scrubber rating .. Populate hash for each bit position
    include_tasks: fill_bits_lines.yml
    loop: '{{ rating_list }}'
    loop_control:
      loop_var: line
  
  - name: 'CO2 scrubber rating .. Find least common bit at position {{ i }}'
    set_fact:
      least_common_bit: '{% if common[1][1] | length >= common[0][1] | length %}0{% else %}1{% endif %}'
    vars:
      common: '{{ bits_lines[i] | groupby(None) }}'
  
  - name: 'CO2 scrubber rating .. Find all values with bit {{ i }} = {{ least_common_bit }}'
    set_fact:
      rl: '{{ rl | default([]) + [val] }}'
    loop: '{{ rating_list }}'
    loop_control:
      loop_var: val
    when: (val | join(''))[i] == least_common_bit
  
  - name: CO2 scrubber rating .. Store updated rating list
    set_fact:
      rating_list: '{{ rl }}' 
      rl: []

  when: needs_rating
